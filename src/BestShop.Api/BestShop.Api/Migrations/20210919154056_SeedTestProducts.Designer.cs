// <auto-generated />
using System;
using BestShop.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BestShop.Api.Migrations
{
    [DbContext(typeof(BetShopDbContext))]
    [Migration("20210919154056_SeedTestProducts")]
    partial class SeedTestProducts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BestShop.Api.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BestShop.Api.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BestShop.Api.Models.OrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("BestShop.Api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMarkup")
                        .HasColumnType("bit");

                    b.Property<int?>("Markup")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82b62c56-e94c-491e-aac3-1944c4e8d131"),
                            AvailableQuantity = 10,
                            Code = "Prod001",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(1540),
                            Description = "Description for Product 1",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(2514),
                            Name = "Product 1",
                            Price = 22.50m
                        },
                        new
                        {
                            Id = new Guid("5c2d1c43-752f-43a9-b6d3-a81d423730c8"),
                            AvailableQuantity = 15,
                            Code = "Prod002",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4730),
                            Description = "Description for Product 2",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4733),
                            Name = "Product 2",
                            Price = 23.99m
                        },
                        new
                        {
                            Id = new Guid("2a8b73c4-5d8b-4cc9-8a62-0db0c7d178d1"),
                            AvailableQuantity = 15,
                            Code = "Prod003",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4737),
                            Description = "Description for Product 3",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4737),
                            Name = "Product 3",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = new Guid("864220f7-183f-493e-8553-4fec9ddbee57"),
                            AvailableQuantity = 15,
                            Code = "Prod004",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4740),
                            Description = "Description for Product 4",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4741),
                            Name = "Product 4",
                            Price = 92.00m
                        },
                        new
                        {
                            Id = new Guid("ea4c4d78-bbd9-434b-9ff5-864eb7bf1e22"),
                            AvailableQuantity = 15,
                            Code = "Prod005",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4742),
                            Description = "Description for Product 5",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4743),
                            Name = "Product 5",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = new Guid("da259b14-c0d6-4325-b197-2d40511cc7aa"),
                            AvailableQuantity = 15,
                            Code = "Prod006",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4748),
                            Description = "Description for Product 6",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4748),
                            Name = "Product 6",
                            Price = 40.99m
                        },
                        new
                        {
                            Id = new Guid("06a5a09a-3b74-40a3-8efc-ac0847680e76"),
                            AvailableQuantity = 15,
                            Code = "Prod007",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4750),
                            Description = "Description for Product 7",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4751),
                            Name = "Product 7",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = new Guid("635b3127-3654-42fb-8449-1b769056fcdf"),
                            AvailableQuantity = 15,
                            Code = "Prod008",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4753),
                            Description = "Description for Product 8",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4754),
                            Name = "Product 8",
                            Price = 50.89m
                        },
                        new
                        {
                            Id = new Guid("1145d6bf-53d6-45c1-bc03-a412707cbd74"),
                            AvailableQuantity = 15,
                            Code = "Prod009",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4761),
                            Description = "Description for Product 9",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4761),
                            Name = "Product 9",
                            Price = 145.89m
                        },
                        new
                        {
                            Id = new Guid("c02f0eb0-aa67-4308-9231-9aae79519874"),
                            AvailableQuantity = 15,
                            Code = "Prod0010",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4764),
                            Description = "Description for Product 10",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4765),
                            Name = "Product 10",
                            Price = 265.49m
                        },
                        new
                        {
                            Id = new Guid("c8781246-2d4e-4413-a58b-a17e176da833"),
                            AvailableQuantity = 15,
                            Code = "Prod0011",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4767),
                            Description = "Description for Product 11",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4768),
                            Name = "Product 11",
                            Price = 300.59m
                        },
                        new
                        {
                            Id = new Guid("338eef83-b7a4-4a6b-a69b-659b6323f234"),
                            AvailableQuantity = 15,
                            Code = "Prod0012",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4769),
                            Description = "Description for Product 12",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4770),
                            Name = "Product 12",
                            Price = 172.59m
                        },
                        new
                        {
                            Id = new Guid("a6d3ab96-b1e5-43d4-8bdf-0d5fb71acb2d"),
                            AvailableQuantity = 15,
                            Code = "Prod0013",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4772),
                            Description = "Description for Product 13",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4773),
                            Name = "Product 13",
                            Price = 101.50m
                        },
                        new
                        {
                            Id = new Guid("2a30f745-9581-4e1a-a9d7-c44f9a6d73b8"),
                            AvailableQuantity = 15,
                            Code = "Prod0014",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4774),
                            Description = "Description for Product 14",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4775),
                            Name = "Product 14",
                            Price = 35.50m
                        },
                        new
                        {
                            Id = new Guid("5318ae4c-5473-419e-b8e0-1784b17701bf"),
                            AvailableQuantity = 15,
                            Code = "Prod0015",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4777),
                            Description = "Description for Product 15",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4778),
                            Name = "Product 15",
                            Price = 100.50m
                        },
                        new
                        {
                            Id = new Guid("a383fd3f-1756-4aa1-b8fa-849c84f826fb"),
                            AvailableQuantity = 15,
                            Code = "Prod0016",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4779),
                            Description = "Description for Product 16",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4780),
                            Name = "Product 16",
                            Price = 83.50m
                        },
                        new
                        {
                            Id = new Guid("393c5ac7-26e6-4760-b2b5-75c6ccfa18d4"),
                            AvailableQuantity = 15,
                            Code = "Prod0017",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4784),
                            Description = "Description for Product 17",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4785),
                            Name = "Product 17",
                            Price = 189.50m
                        },
                        new
                        {
                            Id = new Guid("1060b098-f1b9-42f8-898b-358bc25ed136"),
                            AvailableQuantity = 15,
                            Code = "Prod0018",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4788),
                            Description = "Description for Product 18",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4788),
                            Name = "Product 18",
                            Price = 365.50m
                        },
                        new
                        {
                            Id = new Guid("17764b9d-1c95-45e9-a1b0-a96c40321d06"),
                            AvailableQuantity = 15,
                            Code = "Prod0019",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4790),
                            Description = "Description for Product 19",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4791),
                            Name = "Product 19",
                            Price = 13.50m
                        },
                        new
                        {
                            Id = new Guid("2e739339-d491-4d96-9684-177bf26d2517"),
                            AvailableQuantity = 15,
                            Code = "Prod0020",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4793),
                            Description = "Description for Product 20",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4793),
                            Name = "Product 20",
                            Price = 69.30m
                        },
                        new
                        {
                            Id = new Guid("c60c638c-9587-454f-99b2-316ca188ca8b"),
                            AvailableQuantity = 15,
                            Code = "Prod0021",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4795),
                            Description = "Description for Product 21",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4796),
                            Name = "Product 21",
                            Price = 44.78m
                        },
                        new
                        {
                            Id = new Guid("e4402e01-3ea5-4290-a0e6-787bd184b285"),
                            AvailableQuantity = 15,
                            Code = "Prod0022",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4798),
                            Description = "Description for Product 22",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4798),
                            Name = "Product 22",
                            Price = 285.99m
                        },
                        new
                        {
                            Id = new Guid("2e72bc2f-109a-411e-8f79-f3e3cd01a8ba"),
                            AvailableQuantity = 15,
                            Code = "Prod0023",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4800),
                            Description = "Description for Product 23",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4801),
                            Name = "Product 23",
                            Price = 500.99m
                        },
                        new
                        {
                            Id = new Guid("5c27810d-9be3-43b5-85f8-d864b512668c"),
                            AvailableQuantity = 15,
                            Code = "Prod0024",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4803),
                            Description = "Description for Product 24",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4803),
                            Name = "Product 24",
                            Price = 412.00m
                        },
                        new
                        {
                            Id = new Guid("f44a7f24-cf9c-4a10-bd96-72eb13ef12eb"),
                            AvailableQuantity = 15,
                            Code = "Prod0025",
                            Created = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4807),
                            Description = "Description for Product 25",
                            HasMarkup = false,
                            Modified = new DateTime(2021, 9, 19, 15, 40, 56, 424, DateTimeKind.Utc).AddTicks(4808),
                            Name = "Product 25",
                            Price = 60.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BestShop.Api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BestShop.Api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BestShop.Api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BestShop.Api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
